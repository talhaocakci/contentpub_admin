type Bundle @aws_iam
@aws_api_key {
	id: ID!
	name: String
	description: String
	isFree: Boolean
	contents(
		filter: ModelBundleContentFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelBundleContentConnection
	prices(
		filter: ModelPriceFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelPriceConnection
	isAllAccess: Boolean
	stripeProductId: String
	isAllCourses: Boolean
	isAllDocuments: Boolean
	isPublished: Boolean
	isArchived: Boolean
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type BundleContent @aws_iam
@aws_api_key {
	id: ID!
	contentId: ID!
	bundleId: ID!
	content: Content!
	bundle: Bundle!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type Content @aws_iam
@aws_api_key {
	id: ID!
	name: String
	description: String
	s3Url: AWSURL
	type: ContentType
	objectId: String
	owner: String
	bundles(
		filter: ModelBundleContentFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelBundleContentConnection
	photoUrl: String
	promoVideoUrl: String
	isPublished: Boolean
	isArchived: Boolean
	Coworkers(
		filter: ModelContentCoworkerFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelContentCoworkerConnection
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type ContentCoworker @aws_iam
@aws_api_key {
	id: ID!
	coworkerId: ID!
	contentId: ID!
	coworker: Coworker!
	content: Content!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

enum ContentType {
	COURSE
	DOCUMENT
	ARTICLE
	VIDEO
	PHOTO
	ONLINE_SESSION
}

type Course @aws_iam
@aws_api_key {
	id: ID!
	title: String
	description: String
	thumbnail: String
	stripeProduct: String
	Sections(
		filter: ModelSectionFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelSectionConnection
	content: Content
	coverPhotoUrl: String
	promoVideoUrl: String
	subtitle: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	courseContentId: ID
}

type Coworker @aws_iam
@aws_api_key {
	id: ID!
	email: String
	displayName: String
	photoUrl: String
	description: String
	contents(
		filter: ModelContentCoworkerFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelContentCoworkerConnection
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

input CreateBundleContentInput {
	id: ID
	contentId: ID!
	bundleId: ID!
}

input CreateBundleInput {
	id: ID
	name: String
	description: String
	isFree: Boolean
	isAllAccess: Boolean
	stripeProductId: String
	isAllCourses: Boolean
	isAllDocuments: Boolean
	isPublished: Boolean
	isArchived: Boolean
}

input CreateContentCoworkerInput {
	id: ID
	coworkerId: ID!
	contentId: ID!
}

input CreateContentInput {
	id: ID
	name: String
	description: String
	s3Url: AWSURL
	type: ContentType
	objectId: String
	owner: String
	photoUrl: String
	promoVideoUrl: String
	isPublished: Boolean
	isArchived: Boolean
}

input CreateCourseInput {
	id: ID
	title: String
	description: String
	thumbnail: String
	stripeProduct: String
	coverPhotoUrl: String
	promoVideoUrl: String
	subtitle: String
	courseContentId: ID
}

input CreateCoworkerInput {
	id: ID
	email: String
	displayName: String
	photoUrl: String
	description: String
}

input CreateCustomerInput {
	id: ID
	userName: String
	stripeId: String
	createDate: AWSDate
	email: String
}

input CreateLessonInput {
	id: ID
	name: String
	description: String
	video: String
	sectionID: ID!
	order: Int
}

input CreatePriceInput {
	id: ID
	stripePriceId: String
	purchaseType: PurchaseType
	recurrenceType: RecurrenceType
	currency: String
	amount: Float
	bundleID: ID!
	recurrenceInterval: Int
	trialPeriod: Int
}

input CreatePurchaseInput {
	id: ID
	purchaseTime: AWSDate
	validTill: AWSDate
	source: Source
	stripePaymentIntentId: String
	stripePriceId: String
	purchaseType: PurchaseType
	customerID: ID!
	stripeProductId: String
	isActive: Boolean
	cancellationDate: AWSDate
	purchaseBundleId: ID
	purchaseTenantId: ID
}

input CreateSectionInput {
	id: ID
	name: String
	description: String
	courseID: ID!
	subtitle: String
	order: Int
}

input CreateTenantConfigurationInput {
	id: ID
	stripeSecretKey: String
	stripeWebhookSecretKey: String
	stripeWebhookUrl: String
	contentpubApiKey: String
}

input CreateTenantInput {
	id: ID
	name: String
	coverPhotoUrl: String
	promoVideoUrl: String
	description: String
	tenantTestingConfigurationId: ID
	tenantProductionConfigurationId: ID
}

type Customer @aws_iam
@aws_api_key {
	id: ID!
	userName: String
	stripeId: String
	createDate: AWSDate
	purchases(
		filter: ModelPurchaseFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelPurchaseConnection
	email: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

input DeleteBundleContentInput {
	id: ID!
}

input DeleteBundleInput {
	id: ID!
}

input DeleteContentCoworkerInput {
	id: ID!
}

input DeleteContentInput {
	id: ID!
}

input DeleteCourseInput {
	id: ID!
}

input DeleteCoworkerInput {
	id: ID!
}

input DeleteCustomerInput {
	id: ID!
}

input DeleteLessonInput {
	id: ID!
}

input DeletePriceInput {
	id: ID!
}

input DeletePurchaseInput {
	id: ID!
}

input DeleteSectionInput {
	id: ID!
}

input DeleteTenantConfigurationInput {
	id: ID!
}

input DeleteTenantInput {
	id: ID!
}

type Lesson @aws_iam
@aws_api_key {
	id: ID!
	name: String
	description: String
	video: String
	sectionID: ID!
	order: Int
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelBundleConditionInput {
	name: ModelStringInput
	description: ModelStringInput
	isFree: ModelBooleanInput
	isAllAccess: ModelBooleanInput
	stripeProductId: ModelStringInput
	isAllCourses: ModelBooleanInput
	isAllDocuments: ModelBooleanInput
	isPublished: ModelBooleanInput
	isArchived: ModelBooleanInput
	and: [ModelBundleConditionInput]
	or: [ModelBundleConditionInput]
	not: ModelBundleConditionInput
}

type ModelBundleConnection @aws_api_key
@aws_iam {
	items: [Bundle]!
	nextToken: String
}

input ModelBundleContentConditionInput {
	contentId: ModelIDInput
	bundleId: ModelIDInput
	and: [ModelBundleContentConditionInput]
	or: [ModelBundleContentConditionInput]
	not: ModelBundleContentConditionInput
}

type ModelBundleContentConnection @aws_iam
@aws_api_key {
	items: [BundleContent]!
	nextToken: String
}

input ModelBundleContentFilterInput {
	id: ModelIDInput
	contentId: ModelIDInput
	bundleId: ModelIDInput
	and: [ModelBundleContentFilterInput]
	or: [ModelBundleContentFilterInput]
	not: ModelBundleContentFilterInput
}

input ModelBundleFilterInput {
	id: ModelIDInput
	name: ModelStringInput
	description: ModelStringInput
	isFree: ModelBooleanInput
	isAllAccess: ModelBooleanInput
	stripeProductId: ModelStringInput
	isAllCourses: ModelBooleanInput
	isAllDocuments: ModelBooleanInput
	isPublished: ModelBooleanInput
	isArchived: ModelBooleanInput
	and: [ModelBundleFilterInput]
	or: [ModelBundleFilterInput]
	not: ModelBundleFilterInput
}

input ModelContentConditionInput {
	name: ModelStringInput
	description: ModelStringInput
	s3Url: ModelStringInput
	type: ModelContentTypeInput
	objectId: ModelStringInput
	owner: ModelStringInput
	photoUrl: ModelStringInput
	promoVideoUrl: ModelStringInput
	isPublished: ModelBooleanInput
	isArchived: ModelBooleanInput
	and: [ModelContentConditionInput]
	or: [ModelContentConditionInput]
	not: ModelContentConditionInput
}

type ModelContentConnection @aws_api_key
@aws_iam {
	items: [Content]!
	nextToken: String
}

input ModelContentCoworkerConditionInput {
	coworkerId: ModelIDInput
	contentId: ModelIDInput
	and: [ModelContentCoworkerConditionInput]
	or: [ModelContentCoworkerConditionInput]
	not: ModelContentCoworkerConditionInput
}

type ModelContentCoworkerConnection @aws_iam
@aws_api_key {
	items: [ContentCoworker]!
	nextToken: String
}

input ModelContentCoworkerFilterInput {
	id: ModelIDInput
	coworkerId: ModelIDInput
	contentId: ModelIDInput
	and: [ModelContentCoworkerFilterInput]
	or: [ModelContentCoworkerFilterInput]
	not: ModelContentCoworkerFilterInput
}

input ModelContentFilterInput {
	id: ModelIDInput
	name: ModelStringInput
	description: ModelStringInput
	s3Url: ModelStringInput
	type: ModelContentTypeInput
	objectId: ModelStringInput
	owner: ModelStringInput
	photoUrl: ModelStringInput
	promoVideoUrl: ModelStringInput
	isPublished: ModelBooleanInput
	isArchived: ModelBooleanInput
	and: [ModelContentFilterInput]
	or: [ModelContentFilterInput]
	not: ModelContentFilterInput
}

input ModelContentTypeInput {
	eq: ContentType
	ne: ContentType
}

input ModelCourseConditionInput {
	title: ModelStringInput
	description: ModelStringInput
	thumbnail: ModelStringInput
	stripeProduct: ModelStringInput
	coverPhotoUrl: ModelStringInput
	promoVideoUrl: ModelStringInput
	subtitle: ModelStringInput
	and: [ModelCourseConditionInput]
	or: [ModelCourseConditionInput]
	not: ModelCourseConditionInput
	courseContentId: ModelIDInput
}

type ModelCourseConnection @aws_api_key
@aws_iam {
	items: [Course]!
	nextToken: String
}

input ModelCourseFilterInput {
	id: ModelIDInput
	title: ModelStringInput
	description: ModelStringInput
	thumbnail: ModelStringInput
	stripeProduct: ModelStringInput
	coverPhotoUrl: ModelStringInput
	promoVideoUrl: ModelStringInput
	subtitle: ModelStringInput
	and: [ModelCourseFilterInput]
	or: [ModelCourseFilterInput]
	not: ModelCourseFilterInput
	courseContentId: ModelIDInput
}

input ModelCoworkerConditionInput {
	email: ModelStringInput
	displayName: ModelStringInput
	photoUrl: ModelStringInput
	description: ModelStringInput
	and: [ModelCoworkerConditionInput]
	or: [ModelCoworkerConditionInput]
	not: ModelCoworkerConditionInput
}

type ModelCoworkerConnection @aws_api_key
@aws_iam {
	items: [Coworker]!
	nextToken: String
}

input ModelCoworkerFilterInput {
	id: ModelIDInput
	email: ModelStringInput
	displayName: ModelStringInput
	photoUrl: ModelStringInput
	description: ModelStringInput
	and: [ModelCoworkerFilterInput]
	or: [ModelCoworkerFilterInput]
	not: ModelCoworkerFilterInput
}

input ModelCustomerConditionInput {
	userName: ModelStringInput
	stripeId: ModelStringInput
	createDate: ModelStringInput
	email: ModelStringInput
	and: [ModelCustomerConditionInput]
	or: [ModelCustomerConditionInput]
	not: ModelCustomerConditionInput
}

type ModelCustomerConnection @aws_api_key
@aws_iam {
	items: [Customer]!
	nextToken: String
}

input ModelCustomerFilterInput {
	id: ModelIDInput
	userName: ModelStringInput
	stripeId: ModelStringInput
	createDate: ModelStringInput
	email: ModelStringInput
	and: [ModelCustomerFilterInput]
	or: [ModelCustomerFilterInput]
	not: ModelCustomerFilterInput
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelLessonConditionInput {
	name: ModelStringInput
	description: ModelStringInput
	video: ModelStringInput
	sectionID: ModelIDInput
	order: ModelIntInput
	and: [ModelLessonConditionInput]
	or: [ModelLessonConditionInput]
	not: ModelLessonConditionInput
}

type ModelLessonConnection @aws_iam
@aws_api_key {
	items: [Lesson]!
	nextToken: String
}

input ModelLessonFilterInput {
	id: ModelIDInput
	name: ModelStringInput
	description: ModelStringInput
	video: ModelStringInput
	sectionID: ModelIDInput
	order: ModelIntInput
	and: [ModelLessonFilterInput]
	or: [ModelLessonFilterInput]
	not: ModelLessonFilterInput
}

input ModelPriceConditionInput {
	stripePriceId: ModelStringInput
	purchaseType: ModelPurchaseTypeInput
	recurrenceType: ModelRecurrenceTypeInput
	currency: ModelStringInput
	amount: ModelFloatInput
	bundleID: ModelIDInput
	recurrenceInterval: ModelIntInput
	trialPeriod: ModelIntInput
	and: [ModelPriceConditionInput]
	or: [ModelPriceConditionInput]
	not: ModelPriceConditionInput
}

type ModelPriceConnection @aws_api_key
@aws_iam {
	items: [Price]!
	nextToken: String
}

input ModelPriceFilterInput {
	id: ModelIDInput
	stripePriceId: ModelStringInput
	purchaseType: ModelPurchaseTypeInput
	recurrenceType: ModelRecurrenceTypeInput
	currency: ModelStringInput
	amount: ModelFloatInput
	bundleID: ModelIDInput
	recurrenceInterval: ModelIntInput
	trialPeriod: ModelIntInput
	and: [ModelPriceFilterInput]
	or: [ModelPriceFilterInput]
	not: ModelPriceFilterInput
}

input ModelPurchaseConditionInput {
	purchaseTime: ModelStringInput
	validTill: ModelStringInput
	source: ModelSourceInput
	stripePaymentIntentId: ModelStringInput
	stripePriceId: ModelStringInput
	purchaseType: ModelPurchaseTypeInput
	customerID: ModelIDInput
	stripeProductId: ModelStringInput
	isActive: ModelBooleanInput
	cancellationDate: ModelStringInput
	and: [ModelPurchaseConditionInput]
	or: [ModelPurchaseConditionInput]
	not: ModelPurchaseConditionInput
	purchaseBundleId: ModelIDInput
	purchaseTenantId: ModelIDInput
}

type ModelPurchaseConnection @aws_iam
@aws_api_key {
	items: [Purchase]!
	nextToken: String
}

input ModelPurchaseFilterInput {
	id: ModelIDInput
	purchaseTime: ModelStringInput
	validTill: ModelStringInput
	source: ModelSourceInput
	stripePaymentIntentId: ModelStringInput
	stripePriceId: ModelStringInput
	purchaseType: ModelPurchaseTypeInput
	customerID: ModelIDInput
	stripeProductId: ModelStringInput
	isActive: ModelBooleanInput
	cancellationDate: ModelStringInput
	and: [ModelPurchaseFilterInput]
	or: [ModelPurchaseFilterInput]
	not: ModelPurchaseFilterInput
	purchaseBundleId: ModelIDInput
	purchaseTenantId: ModelIDInput
}

input ModelPurchaseTypeInput {
	eq: PurchaseType
	ne: PurchaseType
}

input ModelRecurrenceTypeInput {
	eq: RecurrenceType
	ne: RecurrenceType
}

input ModelSectionConditionInput {
	name: ModelStringInput
	description: ModelStringInput
	courseID: ModelIDInput
	subtitle: ModelStringInput
	order: ModelIntInput
	and: [ModelSectionConditionInput]
	or: [ModelSectionConditionInput]
	not: ModelSectionConditionInput
}

type ModelSectionConnection @aws_api_key
@aws_iam {
	items: [Section]!
	nextToken: String
}

input ModelSectionFilterInput {
	id: ModelIDInput
	name: ModelStringInput
	description: ModelStringInput
	courseID: ModelIDInput
	subtitle: ModelStringInput
	order: ModelIntInput
	and: [ModelSectionFilterInput]
	or: [ModelSectionFilterInput]
	not: ModelSectionFilterInput
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelSourceInput {
	eq: Source
	ne: Source
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
	ne: Boolean
	eq: Boolean
}

input ModelSubscriptionBundleContentFilterInput {
	id: ModelSubscriptionIDInput
	contentId: ModelSubscriptionIDInput
	bundleId: ModelSubscriptionIDInput
	and: [ModelSubscriptionBundleContentFilterInput]
	or: [ModelSubscriptionBundleContentFilterInput]
}

input ModelSubscriptionBundleFilterInput {
	id: ModelSubscriptionIDInput
	name: ModelSubscriptionStringInput
	description: ModelSubscriptionStringInput
	isFree: ModelSubscriptionBooleanInput
	isAllAccess: ModelSubscriptionBooleanInput
	stripeProductId: ModelSubscriptionStringInput
	isAllCourses: ModelSubscriptionBooleanInput
	isAllDocuments: ModelSubscriptionBooleanInput
	isPublished: ModelSubscriptionBooleanInput
	isArchived: ModelSubscriptionBooleanInput
	and: [ModelSubscriptionBundleFilterInput]
	or: [ModelSubscriptionBundleFilterInput]
}

input ModelSubscriptionContentCoworkerFilterInput {
	id: ModelSubscriptionIDInput
	coworkerId: ModelSubscriptionIDInput
	contentId: ModelSubscriptionIDInput
	and: [ModelSubscriptionContentCoworkerFilterInput]
	or: [ModelSubscriptionContentCoworkerFilterInput]
}

input ModelSubscriptionContentFilterInput {
	id: ModelSubscriptionIDInput
	name: ModelSubscriptionStringInput
	description: ModelSubscriptionStringInput
	s3Url: ModelSubscriptionStringInput
	type: ModelSubscriptionStringInput
	objectId: ModelSubscriptionStringInput
	owner: ModelSubscriptionStringInput
	photoUrl: ModelSubscriptionStringInput
	promoVideoUrl: ModelSubscriptionStringInput
	isPublished: ModelSubscriptionBooleanInput
	isArchived: ModelSubscriptionBooleanInput
	and: [ModelSubscriptionContentFilterInput]
	or: [ModelSubscriptionContentFilterInput]
}

input ModelSubscriptionCourseFilterInput {
	id: ModelSubscriptionIDInput
	title: ModelSubscriptionStringInput
	description: ModelSubscriptionStringInput
	thumbnail: ModelSubscriptionStringInput
	stripeProduct: ModelSubscriptionStringInput
	coverPhotoUrl: ModelSubscriptionStringInput
	promoVideoUrl: ModelSubscriptionStringInput
	subtitle: ModelSubscriptionStringInput
	and: [ModelSubscriptionCourseFilterInput]
	or: [ModelSubscriptionCourseFilterInput]
}

input ModelSubscriptionCoworkerFilterInput {
	id: ModelSubscriptionIDInput
	email: ModelSubscriptionStringInput
	displayName: ModelSubscriptionStringInput
	photoUrl: ModelSubscriptionStringInput
	description: ModelSubscriptionStringInput
	and: [ModelSubscriptionCoworkerFilterInput]
	or: [ModelSubscriptionCoworkerFilterInput]
}

input ModelSubscriptionCustomerFilterInput {
	id: ModelSubscriptionIDInput
	userName: ModelSubscriptionStringInput
	stripeId: ModelSubscriptionStringInput
	createDate: ModelSubscriptionStringInput
	email: ModelSubscriptionStringInput
	and: [ModelSubscriptionCustomerFilterInput]
	or: [ModelSubscriptionCustomerFilterInput]
}

input ModelSubscriptionFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	in: [Float]
	notIn: [Float]
}

input ModelSubscriptionIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	in: [ID]
	notIn: [ID]
}

input ModelSubscriptionIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	in: [Int]
	notIn: [Int]
}

input ModelSubscriptionLessonFilterInput {
	id: ModelSubscriptionIDInput
	name: ModelSubscriptionStringInput
	description: ModelSubscriptionStringInput
	video: ModelSubscriptionStringInput
	sectionID: ModelSubscriptionIDInput
	order: ModelSubscriptionIntInput
	and: [ModelSubscriptionLessonFilterInput]
	or: [ModelSubscriptionLessonFilterInput]
}

input ModelSubscriptionPriceFilterInput {
	id: ModelSubscriptionIDInput
	stripePriceId: ModelSubscriptionStringInput
	purchaseType: ModelSubscriptionStringInput
	recurrenceType: ModelSubscriptionStringInput
	currency: ModelSubscriptionStringInput
	amount: ModelSubscriptionFloatInput
	bundleID: ModelSubscriptionIDInput
	recurrenceInterval: ModelSubscriptionIntInput
	trialPeriod: ModelSubscriptionIntInput
	and: [ModelSubscriptionPriceFilterInput]
	or: [ModelSubscriptionPriceFilterInput]
}

input ModelSubscriptionPurchaseFilterInput {
	id: ModelSubscriptionIDInput
	purchaseTime: ModelSubscriptionStringInput
	validTill: ModelSubscriptionStringInput
	source: ModelSubscriptionStringInput
	stripePaymentIntentId: ModelSubscriptionStringInput
	stripePriceId: ModelSubscriptionStringInput
	purchaseType: ModelSubscriptionStringInput
	customerID: ModelSubscriptionIDInput
	stripeProductId: ModelSubscriptionStringInput
	isActive: ModelSubscriptionBooleanInput
	cancellationDate: ModelSubscriptionStringInput
	and: [ModelSubscriptionPurchaseFilterInput]
	or: [ModelSubscriptionPurchaseFilterInput]
}

input ModelSubscriptionSectionFilterInput {
	id: ModelSubscriptionIDInput
	name: ModelSubscriptionStringInput
	description: ModelSubscriptionStringInput
	courseID: ModelSubscriptionIDInput
	subtitle: ModelSubscriptionStringInput
	order: ModelSubscriptionIntInput
	and: [ModelSubscriptionSectionFilterInput]
	or: [ModelSubscriptionSectionFilterInput]
}

input ModelSubscriptionStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	in: [String]
	notIn: [String]
}

input ModelSubscriptionTenantConfigurationFilterInput {
	id: ModelSubscriptionIDInput
	stripeSecretKey: ModelSubscriptionStringInput
	stripeWebhookSecretKey: ModelSubscriptionStringInput
	stripeWebhookUrl: ModelSubscriptionStringInput
	contentpubApiKey: ModelSubscriptionStringInput
	and: [ModelSubscriptionTenantConfigurationFilterInput]
	or: [ModelSubscriptionTenantConfigurationFilterInput]
}

input ModelSubscriptionTenantFilterInput {
	id: ModelSubscriptionIDInput
	name: ModelSubscriptionStringInput
	coverPhotoUrl: ModelSubscriptionStringInput
	promoVideoUrl: ModelSubscriptionStringInput
	description: ModelSubscriptionStringInput
	and: [ModelSubscriptionTenantFilterInput]
	or: [ModelSubscriptionTenantFilterInput]
}

input ModelTenantConditionInput {
	name: ModelStringInput
	coverPhotoUrl: ModelStringInput
	promoVideoUrl: ModelStringInput
	description: ModelStringInput
	and: [ModelTenantConditionInput]
	or: [ModelTenantConditionInput]
	not: ModelTenantConditionInput
	tenantTestingConfigurationId: ModelIDInput
	tenantProductionConfigurationId: ModelIDInput
}

input ModelTenantConfigurationConditionInput {
	stripeSecretKey: ModelStringInput
	stripeWebhookSecretKey: ModelStringInput
	stripeWebhookUrl: ModelStringInput
	contentpubApiKey: ModelStringInput
	and: [ModelTenantConfigurationConditionInput]
	or: [ModelTenantConfigurationConditionInput]
	not: ModelTenantConfigurationConditionInput
}

type ModelTenantConfigurationConnection @aws_api_key
@aws_iam {
	items: [TenantConfiguration]!
	nextToken: String
}

input ModelTenantConfigurationFilterInput {
	id: ModelIDInput
	stripeSecretKey: ModelStringInput
	stripeWebhookSecretKey: ModelStringInput
	stripeWebhookUrl: ModelStringInput
	contentpubApiKey: ModelStringInput
	and: [ModelTenantConfigurationFilterInput]
	or: [ModelTenantConfigurationFilterInput]
	not: ModelTenantConfigurationFilterInput
}

type ModelTenantConnection @aws_api_key
@aws_iam {
	items: [Tenant]!
	nextToken: String
}

input ModelTenantFilterInput {
	id: ModelIDInput
	name: ModelStringInput
	coverPhotoUrl: ModelStringInput
	promoVideoUrl: ModelStringInput
	description: ModelStringInput
	and: [ModelTenantFilterInput]
	or: [ModelTenantFilterInput]
	not: ModelTenantFilterInput
	tenantTestingConfigurationId: ModelIDInput
	tenantProductionConfigurationId: ModelIDInput
}

type Mutation {
	createCoworker(input: CreateCoworkerInput!, condition: ModelCoworkerConditionInput): Coworker
		@aws_api_key
@aws_iam
	updateCoworker(input: UpdateCoworkerInput!, condition: ModelCoworkerConditionInput): Coworker
		@aws_api_key
@aws_iam
	deleteCoworker(input: DeleteCoworkerInput!, condition: ModelCoworkerConditionInput): Coworker
		@aws_api_key
@aws_iam
	createTenantConfiguration(input: CreateTenantConfigurationInput!, condition: ModelTenantConfigurationConditionInput): TenantConfiguration
		@aws_api_key
@aws_iam
	updateTenantConfiguration(input: UpdateTenantConfigurationInput!, condition: ModelTenantConfigurationConditionInput): TenantConfiguration
		@aws_api_key
@aws_iam
	deleteTenantConfiguration(input: DeleteTenantConfigurationInput!, condition: ModelTenantConfigurationConditionInput): TenantConfiguration
		@aws_api_key
@aws_iam
	createPrice(input: CreatePriceInput!, condition: ModelPriceConditionInput): Price
		@aws_api_key
@aws_iam
	updatePrice(input: UpdatePriceInput!, condition: ModelPriceConditionInput): Price
		@aws_api_key
@aws_iam
	deletePrice(input: DeletePriceInput!, condition: ModelPriceConditionInput): Price
		@aws_api_key
@aws_iam
	createSection(input: CreateSectionInput!, condition: ModelSectionConditionInput): Section
		@aws_api_key
@aws_iam
	updateSection(input: UpdateSectionInput!, condition: ModelSectionConditionInput): Section
		@aws_api_key
@aws_iam
	deleteSection(input: DeleteSectionInput!, condition: ModelSectionConditionInput): Section
		@aws_api_key
@aws_iam
	createTenant(input: CreateTenantInput!, condition: ModelTenantConditionInput): Tenant
		@aws_api_key
@aws_iam
	updateTenant(input: UpdateTenantInput!, condition: ModelTenantConditionInput): Tenant
		@aws_api_key
@aws_iam
	deleteTenant(input: DeleteTenantInput!, condition: ModelTenantConditionInput): Tenant
		@aws_api_key
@aws_iam
	createContent(input: CreateContentInput!, condition: ModelContentConditionInput): Content
		@aws_api_key
@aws_iam
	updateContent(input: UpdateContentInput!, condition: ModelContentConditionInput): Content
		@aws_api_key
@aws_iam
	deleteContent(input: DeleteContentInput!, condition: ModelContentConditionInput): Content
		@aws_api_key
@aws_iam
	createBundle(input: CreateBundleInput!, condition: ModelBundleConditionInput): Bundle
		@aws_api_key
@aws_iam
	updateBundle(input: UpdateBundleInput!, condition: ModelBundleConditionInput): Bundle
		@aws_api_key
@aws_iam
	deleteBundle(input: DeleteBundleInput!, condition: ModelBundleConditionInput): Bundle
		@aws_api_key
@aws_iam
	createCustomer(input: CreateCustomerInput!, condition: ModelCustomerConditionInput): Customer
		@aws_api_key
@aws_iam
	updateCustomer(input: UpdateCustomerInput!, condition: ModelCustomerConditionInput): Customer
		@aws_api_key
@aws_iam
	deleteCustomer(input: DeleteCustomerInput!, condition: ModelCustomerConditionInput): Customer
		@aws_api_key
@aws_iam
	createPurchase(input: CreatePurchaseInput!, condition: ModelPurchaseConditionInput): Purchase
		@aws_api_key
@aws_iam
	updatePurchase(input: UpdatePurchaseInput!, condition: ModelPurchaseConditionInput): Purchase
		@aws_api_key
@aws_iam
	deletePurchase(input: DeletePurchaseInput!, condition: ModelPurchaseConditionInput): Purchase
		@aws_api_key
@aws_iam
	createLesson(input: CreateLessonInput!, condition: ModelLessonConditionInput): Lesson
		@aws_api_key
@aws_iam
	updateLesson(input: UpdateLessonInput!, condition: ModelLessonConditionInput): Lesson
		@aws_api_key
@aws_iam
	deleteLesson(input: DeleteLessonInput!, condition: ModelLessonConditionInput): Lesson
		@aws_api_key
@aws_iam
	createCourse(input: CreateCourseInput!, condition: ModelCourseConditionInput): Course
		@aws_api_key
@aws_iam
	updateCourse(input: UpdateCourseInput!, condition: ModelCourseConditionInput): Course
		@aws_api_key
@aws_iam
	deleteCourse(input: DeleteCourseInput!, condition: ModelCourseConditionInput): Course
		@aws_api_key
@aws_iam
	createContentCoworker(input: CreateContentCoworkerInput!, condition: ModelContentCoworkerConditionInput): ContentCoworker
		@aws_api_key
@aws_iam
	updateContentCoworker(input: UpdateContentCoworkerInput!, condition: ModelContentCoworkerConditionInput): ContentCoworker
		@aws_api_key
@aws_iam
	deleteContentCoworker(input: DeleteContentCoworkerInput!, condition: ModelContentCoworkerConditionInput): ContentCoworker
		@aws_api_key
@aws_iam
	createBundleContent(input: CreateBundleContentInput!, condition: ModelBundleContentConditionInput): BundleContent
		@aws_api_key
@aws_iam
	updateBundleContent(input: UpdateBundleContentInput!, condition: ModelBundleContentConditionInput): BundleContent
		@aws_api_key
@aws_iam
	deleteBundleContent(input: DeleteBundleContentInput!, condition: ModelBundleContentConditionInput): BundleContent
		@aws_api_key
@aws_iam
}

type Price @aws_iam
@aws_api_key {
	id: ID!
	stripePriceId: String
	purchaseType: PurchaseType
	recurrenceType: RecurrenceType
	currency: String
	amount: Float
	bundleID: ID!
	recurrenceInterval: Int
	trialPeriod: Int
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type Purchase @aws_iam
@aws_api_key {
	id: ID!
	purchaseTime: AWSDate
	validTill: AWSDate
	source: Source
	stripePaymentIntentId: String
	stripePriceId: String
	purchaseType: PurchaseType
	customerID: ID!
	bundle: Bundle
	stripeProductId: String
	tenant: TenantConfiguration
	isActive: Boolean
	cancellationDate: AWSDate
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	purchaseBundleId: ID
	purchaseTenantId: ID
}

enum PurchaseType {
	ONE_TIME
	SUBSCRIPTION
}

type Query {
	getCoworker(id: ID!): Coworker
		@aws_api_key
@aws_iam
	listCoworkers(filter: ModelCoworkerFilterInput, limit: Int, nextToken: String): ModelCoworkerConnection
		@aws_api_key
@aws_iam
	getTenantConfiguration(id: ID!): TenantConfiguration
		@aws_api_key
@aws_iam
	listTenantConfigurations(filter: ModelTenantConfigurationFilterInput, limit: Int, nextToken: String): ModelTenantConfigurationConnection
		@aws_api_key
@aws_iam
	getPrice(id: ID!): Price
		@aws_api_key
@aws_iam
	listPrices(filter: ModelPriceFilterInput, limit: Int, nextToken: String): ModelPriceConnection
		@aws_api_key
@aws_iam
	pricesByBundleID(
		bundleID: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelPriceFilterInput,
		limit: Int,
		nextToken: String
	): ModelPriceConnection
		@aws_api_key
@aws_iam
	getSection(id: ID!): Section
		@aws_api_key
@aws_iam
	listSections(filter: ModelSectionFilterInput, limit: Int, nextToken: String): ModelSectionConnection
		@aws_api_key
@aws_iam
	sectionsByCourseID(
		courseID: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelSectionFilterInput,
		limit: Int,
		nextToken: String
	): ModelSectionConnection
		@aws_api_key
@aws_iam
	getTenant(id: ID!): Tenant
		@aws_api_key
@aws_iam
	listTenants(filter: ModelTenantFilterInput, limit: Int, nextToken: String): ModelTenantConnection
		@aws_api_key
@aws_iam
	getContent(id: ID!): Content
		@aws_api_key
@aws_iam
	listContents(filter: ModelContentFilterInput, limit: Int, nextToken: String): ModelContentConnection
		@aws_api_key
@aws_iam
	getBundle(id: ID!): Bundle
		@aws_api_key
@aws_iam
	listBundles(filter: ModelBundleFilterInput, limit: Int, nextToken: String): ModelBundleConnection
		@aws_api_key
@aws_iam
	getCustomer(id: ID!): Customer
		@aws_api_key
@aws_iam
	listCustomers(filter: ModelCustomerFilterInput, limit: Int, nextToken: String): ModelCustomerConnection
		@aws_api_key
@aws_iam
	getPurchase(id: ID!): Purchase
		@aws_api_key
@aws_iam
	listPurchases(filter: ModelPurchaseFilterInput, limit: Int, nextToken: String): ModelPurchaseConnection
		@aws_api_key
@aws_iam
	purchasesByCustomerID(
		customerID: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelPurchaseFilterInput,
		limit: Int,
		nextToken: String
	): ModelPurchaseConnection
		@aws_api_key
@aws_iam
	getLesson(id: ID!): Lesson
		@aws_api_key
@aws_iam
	listLessons(filter: ModelLessonFilterInput, limit: Int, nextToken: String): ModelLessonConnection
		@aws_api_key
@aws_iam
	lessonsBySectionID(
		sectionID: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelLessonFilterInput,
		limit: Int,
		nextToken: String
	): ModelLessonConnection
		@aws_api_key
@aws_iam
	getCourse(id: ID!): Course
		@aws_api_key
@aws_iam
	listCourses(filter: ModelCourseFilterInput, limit: Int, nextToken: String): ModelCourseConnection
		@aws_api_key
@aws_iam
	getContentCoworker(id: ID!): ContentCoworker
		@aws_api_key
@aws_iam
	listContentCoworkers(filter: ModelContentCoworkerFilterInput, limit: Int, nextToken: String): ModelContentCoworkerConnection
		@aws_api_key
@aws_iam
	contentCoworkersByCoworkerId(
		coworkerId: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelContentCoworkerFilterInput,
		limit: Int,
		nextToken: String
	): ModelContentCoworkerConnection
		@aws_api_key
@aws_iam
	contentCoworkersByContentId(
		contentId: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelContentCoworkerFilterInput,
		limit: Int,
		nextToken: String
	): ModelContentCoworkerConnection
		@aws_api_key
@aws_iam
	getBundleContent(id: ID!): BundleContent
		@aws_api_key
@aws_iam
	listBundleContents(filter: ModelBundleContentFilterInput, limit: Int, nextToken: String): ModelBundleContentConnection
		@aws_api_key
@aws_iam
	bundleContentsByContentId(
		contentId: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelBundleContentFilterInput,
		limit: Int,
		nextToken: String
	): ModelBundleContentConnection
		@aws_api_key
@aws_iam
	bundleContentsByBundleId(
		bundleId: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelBundleContentFilterInput,
		limit: Int,
		nextToken: String
	): ModelBundleContentConnection
		@aws_api_key
@aws_iam
}

enum RecurrenceType {
	WEEKLY
	MONTHLY
	ANNUAL
}

type Section @aws_iam
@aws_api_key {
	id: ID!
	name: String
	description: String
	courseID: ID!
	Lessons(
		filter: ModelLessonFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelLessonConnection
	subtitle: String
	order: Int
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

enum Source {
	SELF
	CENTRAL_CAMPAIGN
}

type Subscription {
	onCreateCoworker(filter: ModelSubscriptionCoworkerFilterInput): Coworker
		@aws_subscribe(mutations: ["createCoworker"])
@aws_api_key
@aws_iam
	onUpdateCoworker(filter: ModelSubscriptionCoworkerFilterInput): Coworker
		@aws_subscribe(mutations: ["updateCoworker"])
@aws_api_key
@aws_iam
	onDeleteCoworker(filter: ModelSubscriptionCoworkerFilterInput): Coworker
		@aws_subscribe(mutations: ["deleteCoworker"])
@aws_api_key
@aws_iam
	onCreateTenantConfiguration(filter: ModelSubscriptionTenantConfigurationFilterInput): TenantConfiguration
		@aws_subscribe(mutations: ["createTenantConfiguration"])
@aws_api_key
@aws_iam
	onUpdateTenantConfiguration(filter: ModelSubscriptionTenantConfigurationFilterInput): TenantConfiguration
		@aws_subscribe(mutations: ["updateTenantConfiguration"])
@aws_api_key
@aws_iam
	onDeleteTenantConfiguration(filter: ModelSubscriptionTenantConfigurationFilterInput): TenantConfiguration
		@aws_subscribe(mutations: ["deleteTenantConfiguration"])
@aws_api_key
@aws_iam
	onCreatePrice(filter: ModelSubscriptionPriceFilterInput): Price
		@aws_subscribe(mutations: ["createPrice"])
@aws_api_key
@aws_iam
	onUpdatePrice(filter: ModelSubscriptionPriceFilterInput): Price
		@aws_subscribe(mutations: ["updatePrice"])
@aws_api_key
@aws_iam
	onDeletePrice(filter: ModelSubscriptionPriceFilterInput): Price
		@aws_subscribe(mutations: ["deletePrice"])
@aws_api_key
@aws_iam
	onCreateSection(filter: ModelSubscriptionSectionFilterInput): Section
		@aws_subscribe(mutations: ["createSection"])
@aws_api_key
@aws_iam
	onUpdateSection(filter: ModelSubscriptionSectionFilterInput): Section
		@aws_subscribe(mutations: ["updateSection"])
@aws_api_key
@aws_iam
	onDeleteSection(filter: ModelSubscriptionSectionFilterInput): Section
		@aws_subscribe(mutations: ["deleteSection"])
@aws_api_key
@aws_iam
	onCreateTenant(filter: ModelSubscriptionTenantFilterInput): Tenant
		@aws_subscribe(mutations: ["createTenant"])
@aws_api_key
@aws_iam
	onUpdateTenant(filter: ModelSubscriptionTenantFilterInput): Tenant
		@aws_subscribe(mutations: ["updateTenant"])
@aws_api_key
@aws_iam
	onDeleteTenant(filter: ModelSubscriptionTenantFilterInput): Tenant
		@aws_subscribe(mutations: ["deleteTenant"])
@aws_api_key
@aws_iam
	onCreateContent(filter: ModelSubscriptionContentFilterInput): Content
		@aws_subscribe(mutations: ["createContent"])
@aws_api_key
@aws_iam
	onUpdateContent(filter: ModelSubscriptionContentFilterInput): Content
		@aws_subscribe(mutations: ["updateContent"])
@aws_api_key
@aws_iam
	onDeleteContent(filter: ModelSubscriptionContentFilterInput): Content
		@aws_subscribe(mutations: ["deleteContent"])
@aws_api_key
@aws_iam
	onCreateBundle(filter: ModelSubscriptionBundleFilterInput): Bundle
		@aws_subscribe(mutations: ["createBundle"])
@aws_api_key
@aws_iam
	onUpdateBundle(filter: ModelSubscriptionBundleFilterInput): Bundle
		@aws_subscribe(mutations: ["updateBundle"])
@aws_api_key
@aws_iam
	onDeleteBundle(filter: ModelSubscriptionBundleFilterInput): Bundle
		@aws_subscribe(mutations: ["deleteBundle"])
@aws_api_key
@aws_iam
	onCreateCustomer(filter: ModelSubscriptionCustomerFilterInput): Customer
		@aws_subscribe(mutations: ["createCustomer"])
@aws_api_key
@aws_iam
	onUpdateCustomer(filter: ModelSubscriptionCustomerFilterInput): Customer
		@aws_subscribe(mutations: ["updateCustomer"])
@aws_api_key
@aws_iam
	onDeleteCustomer(filter: ModelSubscriptionCustomerFilterInput): Customer
		@aws_subscribe(mutations: ["deleteCustomer"])
@aws_api_key
@aws_iam
	onCreatePurchase(filter: ModelSubscriptionPurchaseFilterInput): Purchase
		@aws_subscribe(mutations: ["createPurchase"])
@aws_api_key
@aws_iam
	onUpdatePurchase(filter: ModelSubscriptionPurchaseFilterInput): Purchase
		@aws_subscribe(mutations: ["updatePurchase"])
@aws_api_key
@aws_iam
	onDeletePurchase(filter: ModelSubscriptionPurchaseFilterInput): Purchase
		@aws_subscribe(mutations: ["deletePurchase"])
@aws_api_key
@aws_iam
	onCreateLesson(filter: ModelSubscriptionLessonFilterInput): Lesson
		@aws_subscribe(mutations: ["createLesson"])
@aws_api_key
@aws_iam
	onUpdateLesson(filter: ModelSubscriptionLessonFilterInput): Lesson
		@aws_subscribe(mutations: ["updateLesson"])
@aws_api_key
@aws_iam
	onDeleteLesson(filter: ModelSubscriptionLessonFilterInput): Lesson
		@aws_subscribe(mutations: ["deleteLesson"])
@aws_api_key
@aws_iam
	onCreateCourse(filter: ModelSubscriptionCourseFilterInput): Course
		@aws_subscribe(mutations: ["createCourse"])
@aws_api_key
@aws_iam
	onUpdateCourse(filter: ModelSubscriptionCourseFilterInput): Course
		@aws_subscribe(mutations: ["updateCourse"])
@aws_api_key
@aws_iam
	onDeleteCourse(filter: ModelSubscriptionCourseFilterInput): Course
		@aws_subscribe(mutations: ["deleteCourse"])
@aws_api_key
@aws_iam
	onCreateContentCoworker(filter: ModelSubscriptionContentCoworkerFilterInput): ContentCoworker
		@aws_subscribe(mutations: ["createContentCoworker"])
@aws_api_key
@aws_iam
	onUpdateContentCoworker(filter: ModelSubscriptionContentCoworkerFilterInput): ContentCoworker
		@aws_subscribe(mutations: ["updateContentCoworker"])
@aws_api_key
@aws_iam
	onDeleteContentCoworker(filter: ModelSubscriptionContentCoworkerFilterInput): ContentCoworker
		@aws_subscribe(mutations: ["deleteContentCoworker"])
@aws_api_key
@aws_iam
	onCreateBundleContent(filter: ModelSubscriptionBundleContentFilterInput): BundleContent
		@aws_subscribe(mutations: ["createBundleContent"])
@aws_api_key
@aws_iam
	onUpdateBundleContent(filter: ModelSubscriptionBundleContentFilterInput): BundleContent
		@aws_subscribe(mutations: ["updateBundleContent"])
@aws_api_key
@aws_iam
	onDeleteBundleContent(filter: ModelSubscriptionBundleContentFilterInput): BundleContent
		@aws_subscribe(mutations: ["deleteBundleContent"])
@aws_api_key
@aws_iam
}

type Tenant @aws_iam
@aws_api_key {
	id: ID!
	name: String
	testingConfiguration: TenantConfiguration
	productionConfiguration: TenantConfiguration
	coverPhotoUrl: String
	promoVideoUrl: String
	description: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	tenantTestingConfigurationId: ID
	tenantProductionConfigurationId: ID
}

type TenantConfiguration @aws_iam
@aws_api_key {
	id: ID!
	stripeSecretKey: String
	stripeWebhookSecretKey: String
	stripeWebhookUrl: String
	contentpubApiKey: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

input UpdateBundleContentInput {
	id: ID!
	contentId: ID
	bundleId: ID
}

input UpdateBundleInput {
	id: ID!
	name: String
	description: String
	isFree: Boolean
	isAllAccess: Boolean
	stripeProductId: String
	isAllCourses: Boolean
	isAllDocuments: Boolean
	isPublished: Boolean
	isArchived: Boolean
}

input UpdateContentCoworkerInput {
	id: ID!
	coworkerId: ID
	contentId: ID
}

input UpdateContentInput {
	id: ID!
	name: String
	description: String
	s3Url: AWSURL
	type: ContentType
	objectId: String
	owner: String
	photoUrl: String
	promoVideoUrl: String
	isPublished: Boolean
	isArchived: Boolean
}

input UpdateCourseInput {
	id: ID!
	title: String
	description: String
	thumbnail: String
	stripeProduct: String
	coverPhotoUrl: String
	promoVideoUrl: String
	subtitle: String
	courseContentId: ID
}

input UpdateCoworkerInput {
	id: ID!
	email: String
	displayName: String
	photoUrl: String
	description: String
}

input UpdateCustomerInput {
	id: ID!
	userName: String
	stripeId: String
	createDate: AWSDate
	email: String
}

input UpdateLessonInput {
	id: ID!
	name: String
	description: String
	video: String
	sectionID: ID
	order: Int
}

input UpdatePriceInput {
	id: ID!
	stripePriceId: String
	purchaseType: PurchaseType
	recurrenceType: RecurrenceType
	currency: String
	amount: Float
	bundleID: ID
	recurrenceInterval: Int
	trialPeriod: Int
}

input UpdatePurchaseInput {
	id: ID!
	purchaseTime: AWSDate
	validTill: AWSDate
	source: Source
	stripePaymentIntentId: String
	stripePriceId: String
	purchaseType: PurchaseType
	customerID: ID
	stripeProductId: String
	isActive: Boolean
	cancellationDate: AWSDate
	purchaseBundleId: ID
	purchaseTenantId: ID
}

input UpdateSectionInput {
	id: ID!
	name: String
	description: String
	courseID: ID
	subtitle: String
	order: Int
}

input UpdateTenantConfigurationInput {
	id: ID!
	stripeSecretKey: String
	stripeWebhookSecretKey: String
	stripeWebhookUrl: String
	contentpubApiKey: String
}

input UpdateTenantInput {
	id: ID!
	name: String
	coverPhotoUrl: String
	promoVideoUrl: String
	description: String
	tenantTestingConfigurationId: ID
	tenantProductionConfigurationId: ID
}